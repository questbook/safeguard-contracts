/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "FactoryFriendly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryFriendly__factory>;
    getContractFactory(
      name: "BaseGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseGuard__factory>;
    getContractFactory(
      name: "IGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGuard__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AllowDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowDeployer__factory>;
    getContractFactory(
      name: "AllowTransactionGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowTransactionGuard__factory>;
    getContractFactory(
      name: "DenyDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DenyDeployer__factory>;
    getContractFactory(
      name: "DenyTransactionGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DenyTransactionGuard__factory>;
    getContractFactory(
      name: "IApplicationRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IApplicationRegistry__factory>;
    getContractFactory(
      name: "IApplicationReviewRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IApplicationReviewRegistry__factory>;
    getContractFactory(
      name: "IWorkspaceRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWorkspaceRegistry__factory>;
    getContractFactory(
      name: "ReviewerDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReviewerDeployer__factory>;
    getContractFactory(
      name: "ReviewerTransactionGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReviewerTransactionGuard__factory>;

    getContractAt(
      name: "FactoryFriendly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryFriendly>;
    getContractAt(
      name: "BaseGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseGuard>;
    getContractAt(
      name: "IGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGuard>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AllowDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowDeployer>;
    getContractAt(
      name: "AllowTransactionGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowTransactionGuard>;
    getContractAt(
      name: "DenyDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DenyDeployer>;
    getContractAt(
      name: "DenyTransactionGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DenyTransactionGuard>;
    getContractAt(
      name: "IApplicationRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IApplicationRegistry>;
    getContractAt(
      name: "IApplicationReviewRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IApplicationReviewRegistry>;
    getContractAt(
      name: "IWorkspaceRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWorkspaceRegistry>;
    getContractAt(
      name: "ReviewerDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReviewerDeployer>;
    getContractAt(
      name: "ReviewerTransactionGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReviewerTransactionGuard>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
