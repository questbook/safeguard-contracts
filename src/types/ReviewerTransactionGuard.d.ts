/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReviewerTransactionGuardInterface extends ethers.utils.Interface {
  functions: {
    "applicationReg()": FunctionFragment;
    "applicationReviewReg()": FunctionFragment;
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "fetchReviews(uint96,uint96,address,address)": FunctionFragment;
    "getReviewers()": FunctionFragment;
    "multiSendBytesData()": FunctionFragment;
    "removeGuardBytesData()": FunctionFragment;
    "reviewers(uint256)": FunctionFragment;
    "safeAddress()": FunctionFragment;
    "setApplicationReg(address)": FunctionFragment;
    "setApplicationReviewReg(address)": FunctionFragment;
    "setWorkspaceReg(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "threshold()": FunctionFragment;
    "updateConfig(address[],uint96)": FunctionFragment;
    "workspaceReg()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applicationReg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applicationReviewReg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchReviews",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReviewers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiSendBytesData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardBytesData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApplicationReg",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApplicationReviewReg",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkspaceReg",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "workspaceReg",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "applicationReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applicationReviewReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchReviews",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReviewers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiSendBytesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardBytesData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviewers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApplicationReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApplicationReviewReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkspaceReg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workspaceReg",
    data: BytesLike
  ): Result;

  events: {};
}

export class ReviewerTransactionGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReviewerTransactionGuardInterface;

  functions: {
    applicationReg(overrides?: CallOverrides): Promise<[string]>;

    applicationReviewReg(overrides?: CallOverrides): Promise<[string]>;

    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchReviews(
      _workspaceId: BigNumberish,
      _appId: BigNumberish,
      grantAddress: string,
      _applicantPaymentAddress: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getReviewers(overrides?: CallOverrides): Promise<[string[]]>;

    multiSendBytesData(overrides?: CallOverrides): Promise<[string]>;

    removeGuardBytesData(overrides?: CallOverrides): Promise<[string]>;

    reviewers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    safeAddress(overrides?: CallOverrides): Promise<[string]>;

    setApplicationReg(
      _applicationReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApplicationReviewReg(
      _applicationReviewReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorkspaceReg(
      _workspaceReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateConfig(
      _reviewers: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workspaceReg(overrides?: CallOverrides): Promise<[string]>;
  };

  applicationReg(overrides?: CallOverrides): Promise<string>;

  applicationReviewReg(overrides?: CallOverrides): Promise<string>;

  checkAfterExecution(
    txHash: BytesLike,
    success: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    msgSender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchReviews(
    _workspaceId: BigNumberish,
    _appId: BigNumberish,
    grantAddress: string,
    _applicantPaymentAddress: string,
    overrides?: CallOverrides
  ): Promise<void>;

  getReviewers(overrides?: CallOverrides): Promise<string[]>;

  multiSendBytesData(overrides?: CallOverrides): Promise<string>;

  removeGuardBytesData(overrides?: CallOverrides): Promise<string>;

  reviewers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  safeAddress(overrides?: CallOverrides): Promise<string>;

  setApplicationReg(
    _applicationReg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApplicationReviewReg(
    _applicationReviewReg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorkspaceReg(
    _workspaceReg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  updateConfig(
    _reviewers: string[],
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workspaceReg(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    applicationReg(overrides?: CallOverrides): Promise<string>;

    applicationReviewReg(overrides?: CallOverrides): Promise<string>;

    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      msgSender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchReviews(
      _workspaceId: BigNumberish,
      _appId: BigNumberish,
      grantAddress: string,
      _applicantPaymentAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getReviewers(overrides?: CallOverrides): Promise<string[]>;

    multiSendBytesData(overrides?: CallOverrides): Promise<string>;

    removeGuardBytesData(overrides?: CallOverrides): Promise<string>;

    reviewers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    safeAddress(overrides?: CallOverrides): Promise<string>;

    setApplicationReg(
      _applicationReg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setApplicationReviewReg(
      _applicationReviewReg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorkspaceReg(
      _workspaceReg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    updateConfig(
      _reviewers: string[],
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    workspaceReg(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    applicationReg(overrides?: CallOverrides): Promise<BigNumber>;

    applicationReviewReg(overrides?: CallOverrides): Promise<BigNumber>;

    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchReviews(
      _workspaceId: BigNumberish,
      _appId: BigNumberish,
      grantAddress: string,
      _applicantPaymentAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReviewers(overrides?: CallOverrides): Promise<BigNumber>;

    multiSendBytesData(overrides?: CallOverrides): Promise<BigNumber>;

    removeGuardBytesData(overrides?: CallOverrides): Promise<BigNumber>;

    reviewers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setApplicationReg(
      _applicationReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApplicationReviewReg(
      _applicationReviewReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorkspaceReg(
      _workspaceReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    updateConfig(
      _reviewers: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workspaceReg(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    applicationReg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applicationReviewReg(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      msgSender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchReviews(
      _workspaceId: BigNumberish,
      _appId: BigNumberish,
      grantAddress: string,
      _applicantPaymentAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReviewers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiSendBytesData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGuardBytesData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reviewers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApplicationReg(
      _applicationReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApplicationReviewReg(
      _applicationReviewReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorkspaceReg(
      _workspaceReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateConfig(
      _reviewers: string[],
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workspaceReg(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
