/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReviewerDeployerInterface extends ethers.utils.Interface {
  functions: {
    "counter()": FunctionFragment;
    "deploy(address,address[],uint96,address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string[], BigNumberish, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;

  events: {
    "GuardDeployed(address,address,address[],uint96)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GuardDeployed"): EventFragment;
}

export type GuardDeployedEvent = TypedEvent<
  [string, string, string[], BigNumber] & {
    guardContract: string;
    safeAddress: string;
    reviewers: string[];
    threshold: BigNumber;
  }
>;

export class ReviewerDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReviewerDeployerInterface;

  functions: {
    counter(overrides?: CallOverrides): Promise<[BigNumber]>;

    deploy(
      _safeAddress: string,
      _reviewers: string[],
      _threshold: BigNumberish,
      _applicationReg: string,
      _applicationReviewReg: string,
      _workspaceReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  counter(overrides?: CallOverrides): Promise<BigNumber>;

  deploy(
    _safeAddress: string,
    _reviewers: string[],
    _threshold: BigNumberish,
    _applicationReg: string,
    _applicationReviewReg: string,
    _workspaceReg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    counter(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      _safeAddress: string,
      _reviewers: string[],
      _threshold: BigNumberish,
      _applicationReg: string,
      _applicationReviewReg: string,
      _workspaceReg: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GuardDeployed(address,address,address[],uint96)"(
      guardContract?: null,
      safeAddress?: null,
      reviewers?: null,
      threshold?: null
    ): TypedEventFilter<
      [string, string, string[], BigNumber],
      {
        guardContract: string;
        safeAddress: string;
        reviewers: string[];
        threshold: BigNumber;
      }
    >;

    GuardDeployed(
      guardContract?: null,
      safeAddress?: null,
      reviewers?: null,
      threshold?: null
    ): TypedEventFilter<
      [string, string, string[], BigNumber],
      {
        guardContract: string;
        safeAddress: string;
        reviewers: string[];
        threshold: BigNumber;
      }
    >;
  };

  estimateGas: {
    counter(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      _safeAddress: string,
      _reviewers: string[],
      _threshold: BigNumberish,
      _applicationReg: string,
      _applicationReviewReg: string,
      _workspaceReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      _safeAddress: string,
      _reviewers: string[],
      _threshold: BigNumberish,
      _applicationReg: string,
      _applicationReviewReg: string,
      _workspaceReg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
